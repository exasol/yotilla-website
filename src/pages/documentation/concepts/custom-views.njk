---
layout: base
sidebar: true
meta:
title: "Custom Views"
eleventyNavigation:
key: "Custom Views"
parent: Concepts
---

<div class="container py-4" id="CustomViews">
  <h1>Custom Views</h1>
  <p>This section describes how to use custom views to add flexibility and extend the functionality of Yotilla. Custom
    views make it possible to implement transformations and business logic that currently cannot be implemented with
    business formulas, such as aggregations.</p>
  <div class="callout callout-info">
    <p>
      We recommend that you read the <a href="#">Getting Started</a> and <a href="#">Using Yotilla</a> sections first to
      better understand the procedure and the terminology used in this section.
    </p>
  </div>
  <p>Typical use cases for custom views are:</p>
  <ul>
    <li>Using aggregations or analytical statements in business formulas</li>
    <li>Implementing complex transformations and business logic</li>
    <li>Creating calculated business keys or business references</li>
  </ul>
  <p>The following provides an overview of how custom views work and describes the general workflow for creating them.
    For step-by-step examples of how to create a custom view for a specific use case, see <a href="#examples">Custom
      Views Examples</a>.</p>
</div>

<div class="container py-4">
  <h2 class="border-bottom" id="HowCustomViewsWork">How Custom Views Work</h2>
  <p>A custom view is based on a database view created by the user on the target database. This database view will
    access the data in the data warehouse.</p>
  <p>To simplify how the database view accesses the data, and to guarantee that the right data is available at the right
    time, Yotilla provides input views. An input view contains the business attributes of a single business object
    required to implement the custom view logic. If business attributes of multiple business objects are required, a
    separate input view is generated by Yotilla for each business object. The required business attributes are defined
    in the USES clause of the TinML command <a href="#">DEFINE CUSTOM VIEW</a>.</p>
  <p>Yotilla will always create an input view representing the load timeline of the business object. If the business
    object has at least one source with an inscription time, Yotilla will also create an input view representing the
    inscription timeline of the business object.</p>
  <p>Input views are stored in the <code>IV</code> schema on the target database and are named using the pattern
    <code>v_&lt;business_object_name&gt;__for__&lt;custom_view_name&gt;_&lt;timeline&gt;</code>.
  </p>

  <p>
    The following table explains the variables of the Custom View naming pattern:
  </p>

  <table class="table table-striped">
    <tbody>
      <tr>
        <td><code>&lt;business_object_name&gt;</code></td>
        <td>Name of the business object with the required business attributes</td>
      </tr>
      <tr>
        <td><code>&lt;custom_view_name&gt;</code></td>
        <td>Name of the custom view</td>
      </tr>
      <tr>
        <td><code>&lt;timeline&gt;</code></td>
        <td> LTL = load timeline, ITL = inscription timeline</td>
      </tr>
    </tbody>
  </table>

  <div class="callout callout-info">
    <p>The database view must only access the input views that were provided specifically for the custom view. It must
      never directly access the created data warehouse tables and business object views, since the result may then be
      incomplete and/or out of date.</p>
  </div>

</div>

<div class="container py-4">
  <h2 class="border-bottom" id="CreateACustomView">Create a Custom View</h2>
  <p>Creating a custom view requires a sequence of steps to be carried out both in Yotilla and on the target database.
    The following is a general description of each of the major steps in the procedure for creating a custom view. For
    step-by-step examples, see <a href="#">Custom Views Examples</a>.</p>

  <figure class="figure">
    <img src="{{ '/assets/images/documentation/yotilla-custom-views-workflow.png' | url }}" class="img-fluid figure-img"
      alt="Yotilla's Custom View workflow" />
    <figcaption class="figure-caption">Custom View workflow in Yotilla</figcaption>
  </figure>

  <h3>Prerequisites</h3>
  <p>The user or role creating the custom view must have privileges to create a schema on the target database.</p>

  <h3 id="Procedure">Procedure</h3>
  <h4>Step 1: Create a schema on the target database</h4>
  <div class="callout callout-info">
    <p>This step cannot be carried out in Yotilla, it must be done using a database client connected to the target
      database.</p>
  </div>
  <p>Create a new schema on the target database using your preferred database tool. This schema is where you will create
    the database view for your custom view. The schema can be used for multiple custom views.</p>
  <p>Grant read privileges on the schema to the roles <code>yotilla_admin_role</code> and
    <code>yotilla_execute_template_role</code>.
  </p>
  <p>For more information about the roles created by Yotilla, see <a href="#">Prepare the Target Database</a>.</p>

  <h4>Step 2: Define a source system for custom views</h4>
  <p>Define a new source system to be used only for your custom views.</p>
  <div class="callout callout-info">
    <p>If you are defining the new source system using the TinML command <a href="#">DEFINE SOURCE SYSTEM</a>, use the
      <code>ON TARGET SYSTEM</code> option.
    </p>
  </div>

  <h4>Step 3: Define the custom view and the required business attributes using TinML</h4>
  <p>Use the TinML command <a href="#">DEFINE CUSTOM VIEW</a> and specify the required business attributes in the
    <code>USES</code> clause.
  </p>
  <p>To change the <code>USES</code> clause in an existing custom view, use <a href="#">ALTER CUSTOM VIEW</a>.</p>

  <h4>Step 4: Let Yotilla generate the input views</h4>
  <p>On the Sources page, click on Apply for the custom view.</p>
  <p>Yotilla will generate input views on the target database based on the defined business attributes. The input views
    are created in the iv schema.</p>

  <h4>Step 5: Create the database view of the custom view</h4>
  <div class="callout callout-info">
    <p>This step cannot be carried out in Yotilla, it must be done using a database client connected to the target
      database.</p>
  </div>
  <p>Create a database view in the custom views schema that you created in the first step.</p>
  <p>The database view must provide a column with a "valid from" timestamp that defines the validity of each row. This
    attribute will be used as the inscription time in the custom view. The database view must provide the data for the
    complete timeline.</p>
  <div class="callout callout-info">
    <p>The <code>SELECT</code> statement of the database view must only access the input views provided for the custom
      view. The database view must never directly access the created data warehouse tables and business object views,
      since the result may then be incomplete and/or out of date.</p>
  </div>

  <h4>Step 6: Scan the database view of the custom view</h4>
  <p>On the Sources page, click on Scan metadata for the custom view. The database view columns of your custom view will
    be scanned and displayed on the page.</p>

  <h4>Step 7: Map a business object to the custom view columns</h4>
  <p>Yotilla will by default map a new business object to all custom view columns. On the Sources page, rename or remove
    the new business object and map an existing business object to the custom view columns. Mark the custom view columns
    used as business key for the mapped business object. You can also add business references to your custom view.</p>
  <div class="callout callout-info">
    <p>You can only map exactly one business object to a custom view.</p>
  </div>

  <h4>Step 8: Configure the custom view</h4>
  <p>In the Edit source dialog for the custom view, select the attribute to use as the inscription time. If your custom
    view provides a delete flag, you can also define it in this dialog.</p>

  <h4>Done!</h4>
  <p>Your custom view definition is now complete, and the business attributes of the custom view can be used like any
    other business attribute in business formulas or in the dimensional model.</p>
</div>

<div class="container py-4">
  <h2 class="border-bottom" id="ModifyACustomView">Modify a Custom View</h2>
  <p>To modify an existing custom view, repeat steps 3 to 8 in Create a Custom View.</p>
</div>